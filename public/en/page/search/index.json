[{"content":"How I Built My Blog with Hugo and the Stack Theme Hello everyone! In this post, I’ll share how I built my blog using Obsidian, Hugo, GitHub, and Hostinger, following a tutorial by NetworkChuck and customizing it with the Stack theme (https://stack.jimmycai.com/). I’ll also guide you through configuring the Stack theme to create a sleek and functional blog.\nWhy a Blog? Inspired by Building a Second Brain by Tiago Forte, I started this blog to share my ideas and organize my thoughts in a way that’s accessible and valuable. My goal is to express what I’m learning and provide insights for myself, my friends, family, and anyone interested in my perspective.\nHow I Built the Site Here are the main steps I followed to create my blog, adapted from NetworkChuck’s tutorial .\n1. Writing Posts with Obsidian I use Obsidian, a powerful note-taking app, to write my blog posts in markdown. All posts are stored in a post folder within my Obsidian vault. Each post starts with a front matter block, which includes metadata like title, date, and tags. For example:\n+++ title = \u0026#34;My First Post\u0026#34; date = 2025-06-13 draft = false tags = [\u0026#34;test\u0026#34;, \u0026#34;blog\u0026#34;] +++ Obsidian keeps my notes private, and only files in the post folder are published. To ensure images work (though I’m still troubleshooting this), I plan to use a Python script to sync images from Obsidian’s attachments folder to Hugo’s static/images folder.\n2. Generating the Site with Hugo Hugo is a static site generator that transforms markdown files into a website. Here’s how I set it up:\nInstallation: I installed Hugo on my Mac using Homebrew (brew install hugo). I also installed Git and Go as prerequisites.\nSite Creation: I created a new Hugo site with hugo new site BlogName.\nTheme Setup: I chose the Stack theme (https://stack.jimmycai.com/) for its clean, card-style design. I installed it with:\ngit submodule add https://github.com/CaiJimmy/hugo-theme-stack themes/hugo-theme-stack Configuration: I configured Hugo in hugo.toml by nano command to use the Stack theme:\nbaseURL = \u0026#34;https://example.com/\u0026#34; # Replace with your domain languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;First Post\u0026#34; theme = \u0026#34;hugo-theme-stack\u0026#34; [params] mainSections = [\u0026#34;post\u0026#34;] Syncing Posts: I use rsync to copy posts from Obsidian’s post folder to Hugo’s content/post folder:\nrsync -av --delete ~/path/to/obsidian/post/ ~/path/to/BlogName/content/post/ Testing Locally: I run hugo server -t hugo-theme-stack to preview the site at http://localhost:1313.\n3. Version Control with GitHub I use GitHub to store my site’s code and enable collaboration. Here’s the setup:\nRepository Creation: I created a repository named BlogName on GitHub. SSH Authentication: I generated an SSH key with ssh-keygen -t rsa -b 4096 -C \u0026quot;my-email@example.com\u0026quot;. The keys were initially saved in the wrong directory, but I moved them to ~/.ssh/id_rsa and ~/.ssh/id_rsa.pub, then added the public key to GitHub. Pushing Code: I initialized a Git repository in BlogName, added a remote (git remote add origin git@github.com:username/BlogName.git), and pushed changes: git add . git commit -m \u0026#34;Initial commit\u0026#34; git push origin master Publishing: I pushed the public folder to a hostinger branch for deployment: git subtree push --prefix public origin hostinger 4. Hosting with Vercel Instead using Hostinger I deployed the site using Vercel:\nSite Setup: I created a new site on Vercel, linked to my GitHub repository Webhook: I set up a webhook on GitHub to auto-deploy updates when I push to the master branch. 5. Automating the Workflow To streamline publishing, I created a Bash script (updateblog.sh) that:\nSyncs posts with rsync. Runs the Python script for images images.py. Generates the site with hugo. Commits and pushes to GitHub. Here’s the script:\n# Variabili OBSIDIAN_POST_DIR=\u0026#34;path here\u0026#34; HUGO_POST_DIR=\u0026#34;path here\u0026#34; IMAGES_SCRIPT=\u0026#34;path here\u0026#34; HUGO_DIR=\u0026#34;path here\u0026#34; REPO_URL=\u0026#34;link here\u0026#34; # Step 1: Sincronizza i file markdown da Obsidian a Hugo con rsync echo \u0026#34;Step 1: Sincronizzazione dei file markdown da Obsidian a Hugo con rsync...\u0026#34; rsync -av --delete \u0026#34;$OBSIDIAN_POST_DIR/\u0026#34; \u0026#34;$HUGO_POST_DIR/\u0026#34; if [ $? -ne 0 ]; then echo \u0026#34;Errore: Sincronizzazione con rsync fallita. Controlla i percorsi o installa rsync.\u0026#34; exit 1 fi echo \u0026#34;Step 1 completato: Sincronizzazione terminata.\u0026#34; # Step 2: Esegui lo script Python per sincronizzare markdown e immagini echo \u0026#34;Step 2: Esecuzione dello script Python per sincronizzare markdown e immagini...\u0026#34; python3 \u0026#34;$IMAGES_SCRIPT\u0026#34; if [ $? -ne 0 ]; then echo \u0026#34;Errore: Esecuzione dello script Python fallita. Controlla il file images.py o i percorsi.\u0026#34; exit 1 fi echo \u0026#34;Step 2 completato: Elaborazione Python terminata.\u0026#34; # Step 3: Vai alla directory di Hugo echo \u0026#34;Step 3: Spostamento nella directory di Hugo...\u0026#34; cd \u0026#34;$HUGO_DIR\u0026#34; || { echo \u0026#34;Errore: Impossibile cambiare directory in $HUGO_DIR.\u0026#34; exit 1 } echo \u0026#34;Step 3 completato: Directory cambiata in $HUGO_DIR.\u0026#34; # Step 4: Genera il sito echo \u0026#34;Step 4: Generazione del sito con Hugo...\u0026#34; hugo if [ $? -ne 0 ]; then echo \u0026#34;Errore: Generazione del sito con Hugo fallita. Controlla la configurazione.\u0026#34; exit 1 fi echo \u0026#34;Step 4 completato: Generazione del sito terminata.\u0026#34; # Step 5: Aggiungi e commita i file echo \u0026#34;Step 5: Aggiunta e commit dei file...\u0026#34; git add . git commit -m \u0026#34;Aggiornamento blog $(date +%F)\u0026#34; if [ $? -ne 0 ]; then echo \u0026#34;Errore: Commit dei file fallito. Controlla lo stato del repository Git.\u0026#34; exit 1 fi echo \u0026#34;Step 5 completato: Commit eseguito.\u0026#34; # Step 6: Push sul branch principale (per Vercel) echo \u0026#34;Step 6: Push sul branch principale per Vercel...\u0026#34; git push -u origin master if [ $? -ne 0 ]; then echo \u0026#34;Errore: Push sul branch principale fallito. Controlla la connessione SSH o il repository.\u0026#34; exit 1 fi echo \u0026#34;Step 6 completato: Push eseguito con successo.\u0026#34;\u0026gt;) Script Name: updateblog.sh\nReplace the paths and username with your own. Run it after making it executable (chmod +x updateblog.sh).\nGuide to Using the Stack Theme The Stack theme (https://stack.jimmycai.com/) is a card-style theme designed for bloggers. Here’s how to configure it, based on its documentation (https://stack.jimmycai.com/config/).\nInstallation Add the theme as a Git submodule:\ngit submodule add https://github.com/CaiJimmy/hugo-theme-stack themes/hugo-theme-stack Update hugo.toml to set the theme:\ntheme = \u0026#34;hugo-theme-stack\u0026#34; Configuration Stack supports TOML and YAML configuration, with a planned migration to TOML. For a full list of options, check the config.yaml file in the theme’s root or the documentation (https://stack.jimmycai.com/config/).\nCreating Posts Posts need a front matter block. Example:\n--- title : \u0026#34;Your Post Title\u0026#34; date : 2025-06-13 draft : false tags : [\u0026#34;tag1\u0026#34;, \u0026#34;tag2\u0026#34;] description : \u0026#34;A short description\u0026#34; --- Set draft : false to publish the post. Use image to add a cover image Testing Run hugo server -t hugo-theme-stack --buildDrafts to preview changes locally. Ensure posts appear in the card layout on http://localhost:1313.\nHappy blogging!\n","date":"2025-06-13T00:00:00Z","image":"https://lollo-blog.vercel.app/en/post/blogpost---20250613en/Pasted-image-20250613120635_hu_1ff3b931634ac19f.png","permalink":"https://lollo-blog.vercel.app/en/post/blogpost---20250613en/","title":"How I Built My Blog with Hugo and the Stack Theme"},{"content":"How I Built My Blog with Hugo and the Stack Theme Hello everyone! In this post, I’ll share how I built my blog using Obsidian, Hugo, GitHub, and Hostinger, following a tutorial by NetworkChuck and customizing it with the Stack theme (https://stack.jimmycai.com/). I’ll also guide you through configuring the Stack theme to create a sleek and functional blog.\nWhy a Blog? Inspired by Building a Second Brain by Tiago Forte, I started this blog to share my ideas and organize my thoughts in a way that’s accessible and valuable. My goal is to express what I’m learning and provide insights for myself, my friends, family, and anyone interested in my perspective.\nHow I Built the Site Here are the main steps I followed to create my blog, adapted from NetworkChuck’s tutorial .\n1. Writing Posts with Obsidian I use Obsidian, a powerful note-taking app, to write my blog posts in markdown. All posts are stored in a post folder within my Obsidian vault. Each post starts with a front matter block, which includes metadata like title, date, and tags. For example:\n+++ title = \u0026#34;My First Post\u0026#34; date = 2025-06-13 draft = false tags = [\u0026#34;test\u0026#34;, \u0026#34;blog\u0026#34;] +++ Obsidian keeps my notes private, and only files in the post folder are published. To ensure images work (though I’m still troubleshooting this), I plan to use a Python script to sync images from Obsidian’s attachments folder to Hugo’s static/images folder.\n2. Generating the Site with Hugo Hugo is a static site generator that transforms markdown files into a website. Here’s how I set it up:\nInstallation: I installed Hugo on my Mac using Homebrew (brew install hugo). I also installed Git and Go as prerequisites.\nSite Creation: I created a new Hugo site with hugo new site BlogName.\nTheme Setup: I chose the Stack theme (https://stack.jimmycai.com/) for its clean, card-style design. I installed it with:\ngit submodule add https://github.com/CaiJimmy/hugo-theme-stack themes/hugo-theme-stack Configuration: I configured Hugo in hugo.toml by nano command to use the Stack theme:\nbaseURL = \u0026#34;https://example.com/\u0026#34; # Replace with your domain languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;First Post\u0026#34; theme = \u0026#34;hugo-theme-stack\u0026#34; [params] mainSections = [\u0026#34;post\u0026#34;] Syncing Posts: I use rsync to copy posts from Obsidian’s post folder to Hugo’s content/post folder:\nrsync -av --delete ~/path/to/obsidian/post/ ~/path/to/BlogName/content/post/ Testing Locally: I run hugo server -t hugo-theme-stack to preview the site at http://localhost:1313.\n3. Version Control with GitHub I use GitHub to store my site’s code and enable collaboration. Here’s the setup:\nRepository Creation: I created a repository named BlogName on GitHub. SSH Authentication: I generated an SSH key with ssh-keygen -t rsa -b 4096 -C \u0026quot;my-email@example.com\u0026quot;. The keys were initially saved in the wrong directory, but I moved them to ~/.ssh/id_rsa and ~/.ssh/id_rsa.pub, then added the public key to GitHub. Pushing Code: I initialized a Git repository in BlogName, added a remote (git remote add origin git@github.com:username/BlogName.git), and pushed changes: git add . git commit -m \u0026#34;Initial commit\u0026#34; git push origin master Publishing: I pushed the public folder to a hostinger branch for deployment: git subtree push --prefix public origin hostinger 4. Hosting with Vercel Instead using Hostinger I deployed the site using Vercel:\nSite Setup: I created a new site on Vercel, linked to my GitHub repository Webhook: I set up a webhook on GitHub to auto-deploy updates when I push to the master branch. 5. Automating the Workflow To streamline publishing, I created a Bash script (updateblog.sh) that:\nSyncs posts with rsync. Runs the Python script for images images.py. Generates the site with hugo. Commits and pushes to GitHub. Here’s the script:\n# Variabili OBSIDIAN_POST_DIR=\u0026#34;path here\u0026#34; HUGO_POST_DIR=\u0026#34;path here\u0026#34; IMAGES_SCRIPT=\u0026#34;path here\u0026#34; HUGO_DIR=\u0026#34;path here\u0026#34; REPO_URL=\u0026#34;link here\u0026#34; # Step 1: Sincronizza i file markdown da Obsidian a Hugo con rsync echo \u0026#34;Step 1: Sincronizzazione dei file markdown da Obsidian a Hugo con rsync...\u0026#34; rsync -av --delete \u0026#34;$OBSIDIAN_POST_DIR/\u0026#34; \u0026#34;$HUGO_POST_DIR/\u0026#34; if [ $? -ne 0 ]; then echo \u0026#34;Errore: Sincronizzazione con rsync fallita. Controlla i percorsi o installa rsync.\u0026#34; exit 1 fi echo \u0026#34;Step 1 completato: Sincronizzazione terminata.\u0026#34; # Step 2: Esegui lo script Python per sincronizzare markdown e immagini echo \u0026#34;Step 2: Esecuzione dello script Python per sincronizzare markdown e immagini...\u0026#34; python3 \u0026#34;$IMAGES_SCRIPT\u0026#34; if [ $? -ne 0 ]; then echo \u0026#34;Errore: Esecuzione dello script Python fallita. Controlla il file images.py o i percorsi.\u0026#34; exit 1 fi echo \u0026#34;Step 2 completato: Elaborazione Python terminata.\u0026#34; # Step 3: Vai alla directory di Hugo echo \u0026#34;Step 3: Spostamento nella directory di Hugo...\u0026#34; cd \u0026#34;$HUGO_DIR\u0026#34; || { echo \u0026#34;Errore: Impossibile cambiare directory in $HUGO_DIR.\u0026#34; exit 1 } echo \u0026#34;Step 3 completato: Directory cambiata in $HUGO_DIR.\u0026#34; # Step 4: Genera il sito echo \u0026#34;Step 4: Generazione del sito con Hugo...\u0026#34; hugo if [ $? -ne 0 ]; then echo \u0026#34;Errore: Generazione del sito con Hugo fallita. Controlla la configurazione.\u0026#34; exit 1 fi echo \u0026#34;Step 4 completato: Generazione del sito terminata.\u0026#34; # Step 5: Aggiungi e commita i file echo \u0026#34;Step 5: Aggiunta e commit dei file...\u0026#34; git add . git commit -m \u0026#34;Aggiornamento blog $(date +%F)\u0026#34; if [ $? -ne 0 ]; then echo \u0026#34;Errore: Commit dei file fallito. Controlla lo stato del repository Git.\u0026#34; exit 1 fi echo \u0026#34;Step 5 completato: Commit eseguito.\u0026#34; # Step 6: Push sul branch principale (per Vercel) echo \u0026#34;Step 6: Push sul branch principale per Vercel...\u0026#34; git push -u origin master if [ $? -ne 0 ]; then echo \u0026#34;Errore: Push sul branch principale fallito. Controlla la connessione SSH o il repository.\u0026#34; exit 1 fi echo \u0026#34;Step 6 completato: Push eseguito con successo.\u0026#34;\u0026gt;) Script Name: updateblog.sh\nReplace the paths and username with your own. Run it after making it executable (chmod +x updateblog.sh).\nGuide to Using the Stack Theme The Stack theme (https://stack.jimmycai.com/) is a card-style theme designed for bloggers. Here’s how to configure it, based on its documentation (https://stack.jimmycai.com/config/).\nInstallation Add the theme as a Git submodule:\ngit submodule add https://github.com/CaiJimmy/hugo-theme-stack themes/hugo-theme-stack Update hugo.toml to set the theme:\ntheme = \u0026#34;hugo-theme-stack\u0026#34; Configuration Stack supports TOML and YAML configuration, with a planned migration to TOML. For a full list of options, check the config.yaml file in the theme’s root or the documentation (https://stack.jimmycai.com/config/).\nCreating Posts Posts need a front matter block. Example:\n--- title : \u0026#34;Your Post Title\u0026#34; date : 2025-06-13 draft : false tags : [\u0026#34;tag1\u0026#34;, \u0026#34;tag2\u0026#34;] description : \u0026#34;A short description\u0026#34; --- Set draft : false to publish the post. Use image to add a cover image Testing Run hugo server -t hugo-theme-stack --buildDrafts to preview changes locally. Ensure posts appear in the card layout on http://localhost:1313.\nHappy blogging!\n","date":"2025-06-13T00:00:00Z","image":"https://lollo-blog.vercel.app/en/post/first-post/Pasted-image-20250613120635_hu_1ff3b931634ac19f.png","permalink":"https://lollo-blog.vercel.app/en/post/first-post/","title":"How I Built My Blog with Hugo and the Stack Theme"}]