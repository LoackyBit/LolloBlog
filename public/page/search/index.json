[{"content":"Introduzione Negli ultimi giorni ho deciso di immergermi nello studio di Vim, un editor di testo potente ma notoriamente ostico, per migliorare le mie competenze di programmazione. Sto seguendo il corso CS50\u0026rsquo;s Introduction to Programming with Python di Harvard, che include una serie di problem sets – esercizi di coding che richiedono di sviluppare soluzioni a problemi specifici. Per rendere l’esperienza più formativa, ho scelto di scrivere questi programmi usando Vim, o meglio, Neovim, direttamente dal terminale. In questo post racconto come ho configurato il mio ambiente di lavoro, integrando Visual Studio Code, iTerm2 e cheat sheets per Vim e il terminale macOS, e come ho superato alcune sfide iniziali.\nContesto Il mio obiettivo era duplice: imparare a usare Vim in modo efficace e fare pratica con i comandi del terminale macOS. I problem sets di CS50, come quello sulle Vanity Plates, sono perfetti per esercitarsi, ma di solito li risolvevo usando un container Docker su Visual Studio Code (VS Code). Ho dovuto quindi decidere se usare Vim come estensione su VS Code o passare a Neovim direttamente dal terminale.\nDopo un po’ di esperimenti, ho optato per Neovim da terminale, perché mi permetteva di approfondire sia Vim che i comandi del terminale. Tuttavia, ho dovuto affrontare alcune configurazioni tecniche e trovare un modo per rendere il processo più efficiente, soprattutto per imparare i comandi di Vim e del terminale senza perdermi tra mille risorse.\nConfigurazione di Visual Studio Code con Vim Inizialmente, ho provato a integrare Vim su VS Code. Ho installato due estensioni:\nVSCode Neovim: Porta le funzionalità di Neovim direttamente in VS Code. Nvim UI+: Aggiunge un’interfaccia colorata che evidenzia la modalità di Vim (normale, inserimento, visiva, ecc.). L’installazione di queste estensioni non è stata sufficiente. Ho dovuto modificare il file di configurazione di Neovim, init.lua, per integrare l’estensione Nvim UI+. Questo ha richiesto l’aggiunta di alcune righe specifiche, ma per evitare errori quando usavo Neovim fuori da VS Code, ho racchiuso il codice in un blocco condizionale if. Ecco un esempio di come ho configurato il file:\nif vim.g.vscode then -- Configurazioni specifiche per VS Code end Questa configurazione ha funzionato, ma ho sentito che lavorare direttamente su VS Code mi stava tenendo lontano dall’esperienza “pura” del terminale, che volevo esplorare per imparare i comandi di sistema.\nConfigurazione di iTerm2 Per usare Neovim dal terminale, ho deciso di passare a iTerm2, un sostituto avanzato del terminale macOS standard. iTerm2 offre molte funzionalità, ma ho avuto un problema: non riuscivo a muovermi tra le parole usando la combinazione Option + frecce direzionali, una scorciatoia essenziale per la navigazione veloce.\nHo provato a cambiare l’impostazione dei tasti speciali da “Meta” a “Esc+” seguendo alcune guide, come quella su iTerm2 Setup, ma non ha risolto il problema. Alla fine, ho creato una scorciatoia personalizzata in iTerm2 per emulare il movimento tra le parole. Ecco i passaggi che ho seguito:\nApri iTerm2 \u0026gt; Preferences \u0026gt; Profiles \u0026gt; Keys. Aggiungi una nuova scorciatoia: Keyboard Shortcut: Option + ← Action: Send Escape Sequence Esc+: b (per spostarsi indietro di una parola). Ripeti per Option + → con Esc+ f (per spostarsi avanti). Questa soluzione ha reso la navigazione molto più fluida. Per approfondire, ho anche consultato la documentazione di iTerm2 su CSI u.\nPassaggio a Neovim da Terminale Alla fine, ho deciso di abbandonare VS Code per usare Neovim direttamente da iTerm2. Questo mi ha permesso di concentrarmi sia su Vim che sui comandi del terminale. Tuttavia, mi sono accorto che non conoscevo molti comandi essenziali, come quelli per copiare file o navigare rapidamente. Inizialmente, ho cercato video su YouTube, come “60 Linux Commands you NEED to know”, ma ho trovato questo approccio poco efficiente per un accesso rapido alle informazioni.\nCheat Sheets: La Svolta per l’Efficienza Per velocizzare l’apprendimento, ho cercato dei cheat sheets per Vim e il terminale macOS. Dopo aver esplorato varie risorse, come Vim Cheat Sheet e Mac Terminal Commands Cheat Sheet, ho scaricato due PDF utili:\nVim Commands Cheat Sheet Mac Terminal Commands Cheat Sheet Ho stampato questi cheat sheets e li ho appesi sulla lavagna davanti alla mia scrivania, così da averli sempre a portata di mano. Questo mi ha permesso di consultare rapidamente comandi come cp per copiare file o :w per salvare in Vim, senza dover cercare online ogni volta.\nSfide e Soluzioni Ecco alcune delle sfide che ho affrontato e come le ho risolte:\nNavigazione lenta in Vim: Ho usato il tutor integrato di Vim (:Tutor) per imparare i comandi base e ho tenuto il cheat sheet a portata di mano per comandi più avanzati. Comandi terminale sconosciuti: Ho memorizzato comandi essenziali come pwd (stampa percorso corrente) e cp file1 file2 (copia file) grazie al cheat sheet e a risorse come Baeldung on Linux. Configurazione di iTerm2: La creazione di scorciatoie personalizzate ha risolto il problema della navigazione con Option + frecce. Risultati Ora sono pronto a programmare i problem sets di CS50 usando Neovim su iTerm2. L’ambiente è configurato, i cheat sheets sono sulla mia lavagna e sto iniziando a sentirmi più a mio agio con Vim e il terminale. Scrivere codice in questo modo è più impegnativo rispetto a usare un IDE come VS Code, ma mi sta aiutando a capire meglio il flusso di lavoro di un programmatore e a padroneggiare strumenti potenti.\nConclusione Imparare Vim e configurare un ambiente di lavoro basato su terminale non è stato semplice, ma è un investimento che sta già dando i suoi frutti. I cheat sheets e una configurazione personalizzata di iTerm2 hanno fatto la differenza, rendendo il processo più fluido. Se anche tu stai pensando di provare Vim o Neovim, ti consiglio di iniziare con il tutor integrato e di tenere a portata di mano un cheat sheet per non perderti. Hai mai provato a configurare il tuo terminale per la programmazione? Fammi sapere nei commenti come organizzi il tuo flusso di lavoro!\nNote Tecniche Risorse utilizzate: CS50 Python iTerm2 Oh My Zsh Cheat sheets: Vim e Mac Terminal ","date":"2025-08-25T18:46:00Z","image":"https://lollo-blog.vercel.app/post/blogpost---20250825/Pasted-image-20250825185813_hu_9cdc4a6da3d20d9e.png","permalink":"https://lollo-blog.vercel.app/post/blogpost---20250825/","title":"Imparare Vim e Neovim: La Mia Configurazione per Programmazione Python"},{"content":"Da TradingView a MT5: il contesto TradingView offre uno degli ambienti migliori per lo sviluppo e il test di strategie tramite Pine Script, ma ha dei limiti importanti:\nNon consente trading automatico diretto su conti reali. È più orientato all’analisi visuale che all’automazione. MetaTrader 5, invece, è la piattaforma di riferimento per il trading automatico su Forex e CFD, grazie alla sua flessibilità e alla possibilità di utilizzare Expert Advisor programmati in MQL5.\nLa Strategia: TrendBars su base EMA, ATR e HLC3 La strategia TrendBars nasce da una semplice idea: colorare le barre in base alla deviazione della media HLC3 (media di High, Low e Close) rispetto a una EMA (media mobile esponenziale) dinamicamente \u0026ldquo;ampliata\u0026rdquo; da una banda di tolleranza calcolata tramite ATR (Average True Range) e un moltiplicatore.\nLe regole operative sono:\nLong se HLC3 \u0026gt; EMA + tolleranza Short se HLC3 \u0026lt; EMA - tolleranza Flat/chiusura se HLC3 rientra nella banda neutrale tra EMA - tolleranza ed EMA + tolleranza Le uscite sono sempre \u0026ldquo;a mercato\u0026rdquo;, senza target o stop fisso.\nSpecifiche operative Per la mia applicazione pratica ho scelto:\nStrumento: EUR/USD Capitale iniziale: 1000 USD Leva: 1:30 Volume fisso per operazione: 30000 USD (0.3 lotti standard su EUR/USD) Commissione: 0,00006 USD per unità (da confrontare e adattare in base al broker MT5) Margine massimo impegnato: 100% del capitale Timeframe: 5m Grafico: Heikin Ashi (come su TradingView) Piattaforma: MT5 installato su MacBook Air M3 tramite Wine La conversione: da Pine Script a MQL5 1. Analisi e porting della logica Ho analizzato il Pine Script originale, identificando i punti chiave:\nCalcolo EMA e ATR su dati regolari Calcolo HLC3 e condizioni di trend su dati Heikin Ashi Gestione dinamica della banda di tolleranza Selezione e visualizzazione colore barre Regole di ingresso/uscita e gestione delle posizioni 2. Scrittura dell’Expert Advisor in MQL5 Ho realizzato un EA che:\nReplica fedelmente la logica del Pine Script (incluso il calcolo di Heikin Ashi su OHLC standard, poiché su MT5 non esiste un vero e proprio grafico Heikin Ashi, ma un’indicatore a parte) Gestisce la dimensione fissa dell’ordine, espressa in percentuale rispetto al capitale, e verifica i requisiti di margine prima di ogni operazione Mostra sul grafico tutte le informazioni utili: trend, valori EMA, ATR, tolleranza, colore barra, stato posizioni, ecc. Consente di visualizzare la EMA colorata, le bande di tolleranza e tutte le condizioni di ingresso/uscita 3. Adattamento alle condizioni del broker MT5 Essendo i parametri di marginazione e commissione diversi tra Capital.com (usato in TradingView) e il mio nuovo broker MT5, ho inserito nel codice la possibilità di modificare facilmente:\nCommissione Calcolo del margine Dimensione minima/massima del lotto 4. Problemi di Visualizzazione su MT5 Innanzitutto non esiste la possibilità di visualizzare il grafico Heiken Ashi, se non tramite un indicatore. L’Expert Advisor che ho sviluppato non è in grado di disegnare a grafico le candele Heikin Ashi modificate, perciò per la visualizzazione ho dovuto creare un’indicatore separato Per una migliore visualizzazione ho disattivato la visualizzazione del grafico, impostando il grafico ‘linea’ e poi selezionando il colore ‘none’ tramite le proprietà del grafico.\nSiccome indicatore (visualizzatore) e strategia sono separati, non sarà possibile visualizzare il grafico Heikin Ashi modificato durante la simulazione del backtest. Installazione e test Installazione su MacBook Air M3: MT5 funziona perfettamente tramite Wine. Ho compilato l’EA in MetaEditor, l’ho caricato sul grafico EUR/USD (Heikin Ashi), impostato i parametri richiesti e attivato il trading algoritmico.\nBacktest: Ho testato la strategia tramite il tester di MT5, impostando capitale, leva, commissioni e condizioni identiche a quelle di TradingView. In questo modo ho potuto verificare la corrispondenza tra i risultati ottenuti sulle due piattaforme.\n","date":"2025-07-02T22:00:00Z","image":"https://lollo-blog.vercel.app/post/blogpost---20250703/Pasted-image-20250703230925_hu_f03fdb6aa448972.png","permalink":"https://lollo-blog.vercel.app/post/blogpost---20250703/","title":"Da TradingView a MT5: Automazione della TrendBars Strategy su EUR/USD"}]